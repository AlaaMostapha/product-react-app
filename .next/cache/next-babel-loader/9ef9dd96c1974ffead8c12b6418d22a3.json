{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//reducer(action,state) //return update state\nimport * as actionType from \"../constants/actionTypes\";\nexport default function singleProductReducer(state = {}, action) {\n  switch (action.type) {\n    case actionType.PREQUEST_SINGLLE_PRODUCT:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          singleProductloader: true,\n          id: action.payload.singleProductId\n        });\n      }\n\n    case actionType.GET_SINGLLE_PRODUCT:\n      {\n        return {\n          singleProductloader: false,\n          singleProduct: action.payload.singleProduct\n        };\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["C:/Users/Lenovo/Desktop/ibtikar/projects/product_task/product/src/redux/reducers/product.js"],"names":["actionType","singleProductReducer","state","action","type","PREQUEST_SINGLLE_PRODUCT","singleProductloader","id","payload","singleProductId","GET_SINGLLE_PRODUCT","singleProduct"],"mappings":";;;;;;AAAA;AAEA,OAAO,KAAKA,UAAZ,MAA4B,0BAA5B;AACA,eAAe,SAASC,oBAAT,CAA8BC,KAAK,GAAG,EAAtC,EAA0CC,MAA1C,EAAkD;AAC/D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKJ,UAAU,CAACK,wBAAhB;AAA0C;AACxC,+CACKH,KADL;AAEEI,UAAAA,mBAAmB,EAAE,IAFvB;AAGEC,UAAAA,EAAE,EAAEJ,MAAM,CAACK,OAAP,CAAeC;AAHrB;AAKD;;AACD,SAAKT,UAAU,CAACU,mBAAhB;AAAqC;AACnC,eAAO;AACLJ,UAAAA,mBAAmB,EAAE,KADhB;AAELK,UAAAA,aAAa,EAAER,MAAM,CAACK,OAAP,CAAeG;AAFzB,SAAP;AAID;;AACD;AACE,aAAOT,KAAP;AAfJ;AAiBD","sourcesContent":["//reducer(action,state) //return update state\r\n\r\nimport * as actionType from \"../constants/actionTypes\";\r\nexport default function singleProductReducer(state = {}, action) {\r\n  switch (action.type) {\r\n    case actionType.PREQUEST_SINGLLE_PRODUCT: {\r\n      return {\r\n        ...state,\r\n        singleProductloader: true,\r\n        id: action.payload.singleProductId,\r\n      };\r\n    }\r\n    case actionType.GET_SINGLLE_PRODUCT: {\r\n      return {\r\n        singleProductloader: false,\r\n        singleProduct: action.payload.singleProduct,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}