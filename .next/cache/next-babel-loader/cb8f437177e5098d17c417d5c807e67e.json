{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const handleRequest = request => {\n  return request;\n};\nexport const handleResponse = response => {\n  return response;\n};\nexport const handleError = error => {\n  return Promise.reject(_objectSpread({}, error));\n};","map":{"version":3,"sources":["C:/Users/Lenovo/Desktop/ibtikar/projects/product_task/product/src/network/handlers/login.js"],"names":["handleRequest","request","handleResponse","response","handleError","error","Promise","reject"],"mappings":";;;;;;AAAA,OAAO,MAAMA,aAAa,GAAIC,OAAD,IAAa;AACxC,SAAOA,OAAP;AACD,CAFM;AAGP,OAAO,MAAMC,cAAc,GAAIC,QAAD,IAAc;AAC1C,SAAOA,QAAP;AACD,CAFM;AAGP,OAAO,MAAMC,WAAW,GAAIC,KAAD,IAAW;AACpC,SAAOC,OAAO,CAACC,MAAR,mBAAoBF,KAApB,EAAP;AACD,CAFM","sourcesContent":["export const handleRequest = (request) => {\r\n  return request;\r\n};\r\nexport const handleResponse = (response) => {\r\n  return response;\r\n};\r\nexport const handleError = (error) => {\r\n  return Promise.reject({ ...error });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}