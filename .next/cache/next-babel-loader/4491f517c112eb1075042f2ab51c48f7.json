{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\ibtikar\\\\projects\\\\product_task\\\\product\\\\src\\\\pages\\\\productListNext\\\\productList.js\";\nimport React, { useEffect } from \"react\"; // import \"./productList.scss\";\n//material ui components\n\nimport MediaCard from \"../../components/Card/Card\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\"; //custom components\n\nimport LoadingIndicator from \"../../components/LoadingIndicator/LoadingIndicator\";\nimport Quantity from \"../../components/quantity/quantity\";\nimport CreateButton from \"../../components/Btn/Btn\"; //store\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as productsActions from \"../../redux/actions/actions\";\nimport * as cartActions from \"../../redux/actions/cart\"; //history\n\nimport Link from \"next/link\";\n\nfunction ProductList() {\n  const dispatch = useDispatch();\n  const cart = useSelector(state => state.cartReducer.cart);\n  const products = useSelector(state => state.productsReducer.products);\n  const loading = useSelector(state => state.productsReducer.loader);\n  useEffect(() => {\n    //when component mount get all products\n    dispatch(productsActions.getProducts());\n  }, []);\n  useEffect(() => {\n    //if there are items in cart\n    if (cart) {\n      //get there indexes in product list\n      let indexesOfCartItems = cart.map(cartItem => {\n        return products.findIndex(itemx => itemx.id === cartItem.id);\n      }); //replace them with items in product list\n      //to get them updated with last quantity applied in cart at the same time\n\n      for (let i = 0; i < indexesOfCartItems.length; i++) {\n        products.splice(indexesOfCartItems[i], 1, cart[i]);\n      }\n    }\n  }, [products, cart]);\n\n  const addItem = item => {\n    //add clicked product to cart\n    dispatch(cartActions.addItemInCart(item)); //check if this item is in cart & has quantity return it and update products\n\n    const checkProduct = cart.find(product => product.id === item.id); //check if it was in cart\n\n    if (checkProduct) {\n      const itemIndexInProducts = products.findIndex(itemx => itemx.id === item.id); //get it's index from products\n\n      products[itemIndexInProducts] = checkProduct; //replace it with old one\n\n      if (itemIndexInProducts !== -1) {\n        dispatch(productsActions.showProducts(products)); //update\n      }\n    }\n  };\n\n  const createList = () => {\n    if (products) {\n      Object.entries(products).map((product, index) => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            href: \"/products/[product.id]\",\n            as: \"/product/\",\n            children: [/*#__PURE__*/_jsxDEV(\"a\", {\n              children: product.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: product.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this);\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"lg\",\n    className: \"ProductListContainer\",\n    children: loading ? /*#__PURE__*/_jsxDEV(LoadingIndicator, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      children: [\"xxxx\", createList()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n\nexport default ProductList;","map":{"version":3,"sources":["C:/Users/Lenovo/Desktop/ibtikar/projects/product_task/product/src/pages/productListNext/productList.js"],"names":["React","useEffect","MediaCard","Container","Grid","Paper","LoadingIndicator","Quantity","CreateButton","useDispatch","useSelector","productsActions","cartActions","Link","ProductList","dispatch","cart","state","cartReducer","products","productsReducer","loading","loader","getProducts","indexesOfCartItems","map","cartItem","findIndex","itemx","id","i","length","splice","addItem","item","addItemInCart","checkProduct","find","product","itemIndexInProducts","showProducts","createList","Object","entries","index","title","description"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;AACA;;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,KAAP,MAAkB,yBAAlB,C,CACA;;AACA,OAAOC,gBAAP,MAA6B,oDAA7B;AACA,OAAOC,QAAP,MAAqB,oCAArB;AACA,OAAOC,YAAP,MAAyB,0BAAzB,C,CACA;;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAO,KAAKC,eAAZ,MAAiC,6BAAjC;AACA,OAAO,KAAKC,WAAZ,MAA6B,0BAA7B,C,CACA;;AACA,OAAOC,IAAP,MAAiB,WAAjB;;AACA,SAASC,WAAT,GAAuB;AACrB,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AACA,QAAMO,IAAI,GAAGN,WAAW,CAAEO,KAAD,IAAWA,KAAK,CAACC,WAAN,CAAkBF,IAA9B,CAAxB;AACA,QAAMG,QAAQ,GAAGT,WAAW,CAAEO,KAAD,IAAWA,KAAK,CAACG,eAAN,CAAsBD,QAAlC,CAA5B;AACA,QAAME,OAAO,GAAGX,WAAW,CAAEO,KAAD,IAAWA,KAAK,CAACG,eAAN,CAAsBE,MAAlC,CAA3B;AACArB,EAAAA,SAAS,CAAC,MAAM;AACd;AACAc,IAAAA,QAAQ,CAACJ,eAAe,CAACY,WAAhB,EAAD,CAAR;AACD,GAHQ,EAGN,EAHM,CAAT;AAIAtB,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAIe,IAAJ,EAAU;AACR;AACA,UAAIQ,kBAAkB,GAAGR,IAAI,CAACS,GAAL,CAAUC,QAAD,IAAc;AAC9C,eAAOP,QAAQ,CAACQ,SAAT,CAAoBC,KAAD,IAAWA,KAAK,CAACC,EAAN,KAAaH,QAAQ,CAACG,EAApD,CAAP;AACD,OAFwB,CAAzB,CAFQ,CAKR;AACA;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,kBAAkB,CAACO,MAAvC,EAA+CD,CAAC,EAAhD,EAAoD;AAClDX,QAAAA,QAAQ,CAACa,MAAT,CAAgBR,kBAAkB,CAACM,CAAD,CAAlC,EAAuC,CAAvC,EAA0Cd,IAAI,CAACc,CAAD,CAA9C;AACD;AACF;AACF,GAbQ,EAaN,CAACX,QAAD,EAAWH,IAAX,CAbM,CAAT;;AAcA,QAAMiB,OAAO,GAAIC,IAAD,IAAU;AACxB;AACAnB,IAAAA,QAAQ,CAACH,WAAW,CAACuB,aAAZ,CAA0BD,IAA1B,CAAD,CAAR,CAFwB,CAGxB;;AACA,UAAME,YAAY,GAAGpB,IAAI,CAACqB,IAAL,CAAWC,OAAD,IAAaA,OAAO,CAACT,EAAR,KAAeK,IAAI,CAACL,EAA3C,CAArB,CAJwB,CAI6C;;AACrE,QAAIO,YAAJ,EAAkB;AAChB,YAAMG,mBAAmB,GAAGpB,QAAQ,CAACQ,SAAT,CACzBC,KAAD,IAAWA,KAAK,CAACC,EAAN,KAAaK,IAAI,CAACL,EADH,CAA5B,CADgB,CAIhB;;AACAV,MAAAA,QAAQ,CAACoB,mBAAD,CAAR,GAAgCH,YAAhC,CALgB,CAK8B;;AAC9C,UAAIG,mBAAmB,KAAK,CAAC,CAA7B,EAAgC;AAC9BxB,QAAAA,QAAQ,CAACJ,eAAe,CAAC6B,YAAhB,CAA6BrB,QAA7B,CAAD,CAAR,CAD8B,CACoB;AACnD;AACF;AACF,GAfD;;AAgBA,QAAMsB,UAAU,GAAG,MAAM;AACvB,QAAItB,QAAJ,EAAc;AACZuB,MAAAA,MAAM,CAACC,OAAP,CAAexB,QAAf,EAAyBM,GAAzB,CAA6B,CAACa,OAAD,EAAUM,KAAV,KAAoB;AAC/C,4BACE;AAAA,iCACE,QAAC,IAAD;AAAM,YAAA,IAAI,EAAC,wBAAX;AAAoC,YAAA,EAAE,EAAE,WAAxC;AAAA,oCACE;AAAA,wBAAIN,OAAO,CAACO;AAAZ;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAA,wBAAIP,OAAO,CAACQ;AAAZ;AAAA;AAAA;AAAA;AAAA,oBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,WAASF,KAAT;AAAA;AAAA;AAAA;AAAA,gBADF;AAQD,OATD;AAUD;AACF,GAbD;;AAcA,sBACE,QAAC,SAAD;AAAW,IAAA,QAAQ,EAAC,IAApB;AAAyB,IAAA,SAAS,EAAC,sBAAnC;AAAA,cACGvB,OAAO,gBACN,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,YADM,gBAGN,QAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,OAAO,EAAE,CAAzB;AAAA,yBAEGoB,UAAU,EAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;AAED,eAAe3B,WAAf","sourcesContent":["import React, { useEffect } from \"react\";\r\n// import \"./productList.scss\";\r\n//material ui components\r\nimport MediaCard from \"../../components/Card/Card\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n//custom components\r\nimport LoadingIndicator from \"../../components/LoadingIndicator/LoadingIndicator\";\r\nimport Quantity from \"../../components/quantity/quantity\";\r\nimport CreateButton from \"../../components/Btn/Btn\";\r\n//store\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport * as productsActions from \"../../redux/actions/actions\";\r\nimport * as cartActions from \"../../redux/actions/cart\";\r\n//history\r\nimport Link from \"next/link\";\r\nfunction ProductList() {\r\n  const dispatch = useDispatch();\r\n  const cart = useSelector((state) => state.cartReducer.cart);\r\n  const products = useSelector((state) => state.productsReducer.products);\r\n  const loading = useSelector((state) => state.productsReducer.loader);\r\n  useEffect(() => {\r\n    //when component mount get all products\r\n    dispatch(productsActions.getProducts());\r\n  }, []);\r\n  useEffect(() => {\r\n    //if there are items in cart\r\n    if (cart) {\r\n      //get there indexes in product list\r\n      let indexesOfCartItems = cart.map((cartItem) => {\r\n        return products.findIndex((itemx) => itemx.id === cartItem.id);\r\n      });\r\n      //replace them with items in product list\r\n      //to get them updated with last quantity applied in cart at the same time\r\n      for (let i = 0; i < indexesOfCartItems.length; i++) {\r\n        products.splice(indexesOfCartItems[i], 1, cart[i]);\r\n      }\r\n    }\r\n  }, [products, cart]);\r\n  const addItem = (item) => {\r\n    //add clicked product to cart\r\n    dispatch(cartActions.addItemInCart(item));\r\n    //check if this item is in cart & has quantity return it and update products\r\n    const checkProduct = cart.find((product) => product.id === item.id); //check if it was in cart\r\n    if (checkProduct) {\r\n      const itemIndexInProducts = products.findIndex(\r\n        (itemx) => itemx.id === item.id\r\n      );\r\n      //get it's index from products\r\n      products[itemIndexInProducts] = checkProduct; //replace it with old one\r\n      if (itemIndexInProducts !== -1) {\r\n        dispatch(productsActions.showProducts(products)); //update\r\n      }\r\n    }\r\n  };\r\n  const createList = () => {\r\n    if (products) {\r\n      Object.entries(products).map((product, index) => {\r\n        return (\r\n          <li key={index}>\r\n            <Link href=\"/products/[product.id]\" as={\"/product/\"}>\r\n              <a>{product.title}</a>\r\n              <p>{product.description}</p>\r\n            </Link>\r\n          </li>\r\n        );\r\n      });\r\n    }\r\n  };\r\n  return (\r\n    <Container maxWidth=\"lg\" className=\"ProductListContainer\">\r\n      {loading ? (\r\n        <LoadingIndicator />\r\n      ) : (\r\n        <Grid container spacing={2}>\r\n          xxxx\r\n          {createList()}\r\n        </Grid>\r\n      )}\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default ProductList;\r\n"]},"metadata":{},"sourceType":"module"}