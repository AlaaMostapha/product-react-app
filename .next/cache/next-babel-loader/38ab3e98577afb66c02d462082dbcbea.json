{"ast":null,"code":"import { createStore, applyMiddleware } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport rootReducers from \"../reducers/index\";\nimport rootSaga from \"../saga/index\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { createWrapper } from \"next-redux-wrapper\"; //create saga middleware\n\nconst sagaMiddleWare = createSagaMiddleware(); //create store and fetch reducers and saga middleware\n\nconst bindMiddleware = middleware => {\n  if (true) {\n    const {\n      composeWithDevTools\n    } = require(\"redux-devtools-extension\");\n\n    return composeWithDevTools(applyMiddleware(...middleware));\n  }\n\n  return applyMiddleware(...middleware);\n};\n\nexport const makeStore = context => {\n  const sagaMiddleware = createSagaMiddleware();\n  const store = createStore(rootReducers, bindMiddleware([sagaMiddleware]));\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\nexport const wrapper = createWrapper(makeStore, {\n  debug: true\n});","map":{"version":3,"sources":["C:/Users/Lenovo/Desktop/ibtikar/projects/product_task/product/src/redux/store/index.js"],"names":["createStore","applyMiddleware","createSagaMiddleware","rootReducers","rootSaga","composeWithDevTools","createWrapper","sagaMiddleWare","bindMiddleware","middleware","require","makeStore","context","sagaMiddleware","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,OAAOC,QAAP,MAAqB,eAArB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,aAAT,QAA8B,oBAA9B,C,CACA;;AACA,MAAMC,cAAc,GAAGL,oBAAoB,EAA3C,C,CAEA;;AACA,MAAMM,cAAc,GAAIC,UAAD,IAAgB;AACrC,YAA2C;AACzC,UAAM;AAAEJ,MAAAA;AAAF,QAA0BK,OAAO,CAAC,0BAAD,CAAvC;;AACA,WAAOL,mBAAmB,CAACJ,eAAe,CAAC,GAAGQ,UAAJ,CAAhB,CAA1B;AACD;;AACD,SAAOR,eAAe,CAAC,GAAGQ,UAAJ,CAAtB;AACD,CAND;;AAQA,OAAO,MAAME,SAAS,GAAIC,OAAD,IAAa;AACpC,QAAMC,cAAc,GAAGX,oBAAoB,EAA3C;AACA,QAAMY,KAAK,GAAGd,WAAW,CAACG,YAAD,EAAeK,cAAc,CAAC,CAACK,cAAD,CAAD,CAA7B,CAAzB;AAEAC,EAAAA,KAAK,CAACC,QAAN,GAAiBF,cAAc,CAACG,GAAf,CAAmBZ,QAAnB,CAAjB;AAEA,SAAOU,KAAP;AACD,CAPM;AASP,OAAO,MAAMG,OAAO,GAAGX,aAAa,CAACK,SAAD,EAAY;AAAEO,EAAAA,KAAK,EAAE;AAAT,CAAZ,CAA7B","sourcesContent":["import { createStore, applyMiddleware } from \"redux\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport rootReducers from \"../reducers/index\";\r\nimport rootSaga from \"../saga/index\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport { createWrapper } from \"next-redux-wrapper\";\r\n//create saga middleware\r\nconst sagaMiddleWare = createSagaMiddleware();\r\n\r\n//create store and fetch reducers and saga middleware\r\nconst bindMiddleware = (middleware) => {\r\n  if (process.env.NODE_ENV !== \"production\") {\r\n    const { composeWithDevTools } = require(\"redux-devtools-extension\");\r\n    return composeWithDevTools(applyMiddleware(...middleware));\r\n  }\r\n  return applyMiddleware(...middleware);\r\n};\r\n\r\nexport const makeStore = (context) => {\r\n  const sagaMiddleware = createSagaMiddleware();\r\n  const store = createStore(rootReducers, bindMiddleware([sagaMiddleware]));\r\n\r\n  store.sagaTask = sagaMiddleware.run(rootSaga);\r\n\r\n  return store;\r\n};\r\n\r\nexport const wrapper = createWrapper(makeStore, { debug: true });\r\n"]},"metadata":{},"sourceType":"module"}